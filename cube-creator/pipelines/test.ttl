@base <http://citygraph.ldbar.ch/pipeline/>.
@prefix p: <https://pipeline.described.at/>.
@prefix code: <https://code.described.at/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.

<defaultVars>
  p:variable [ a p:Variable;
    p:name "observer";
    p:value "https://citygraph.co/opendata/cities"
  ], [ a p:Variable;
    p:name "outputFile";
    p:value "output/place_holder.nt"
  ], [ a p:Variable;
    p:name "cubeOutputFile";
    p:value "output/cubes.nt"
  ], [ a p:Variable;
    p:name "dimensionOutputFile";
    p:value "output/dimensions.nt"
  ], [ a p:Variable;
    p:name "cubeCsvMappingFilePattern";
    p:value "src-gen/test.csv.meta.json"
  ], [ a p:Variable;
    p:name "dimensionCsvMappingFilePattern";
    p:value "src-gen/test-dimension-*.csv.meta.json"
  ].

_:datasetMetadata a p:Variable;
  p:name "inputFile";
  p:value "assets/metadata.ttl".

_:cubeMetadata a p:Variable;
    p:name "cubeMetadataFile";
    p:value "assets/shape.ttl".
#
# Combined Cubes & Dimensions pipeline & steps
#
<toFile> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <cubesAndDimensionsTo>
      <serialize>
      <writeFile>
    )
  ].

<cubesAndDimensionsTo> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/concat.js#object>
  ];
  code:arguments (
    <cubesTo>
    <dimensionsTo>
    #<addDatasetMetadata>
  ).

<addDatasetMetadata> a p:Pipeline, p:ReadableObjectMode;
  p:variables [
    p:variable _:datasetMetadata
  ];
  p:steps [
    p:stepList (<readFile> <parseTurtle> )
  ].

<metadataTimestamp> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/map.js#default>
  ];
  code:arguments ("""quad => {
    const rdf = require('rdf-ext')
    const luxon = require('luxon')

    if (quad.predicate.value === 'http://schema.org/dateModified' || quad.predicate.value == 'http://purl.org/dc/terms/modified') {
      const object = rdf.literal(luxon.DateTime.local().toISO(), rdf.namedNode('htt://www.w3.org/2001/XMLSchema#dateTime'))
      return rdf.quad(quad.subject, quad.predicate, object)
    }

    return quad
  }"""^^code:EcmaScript).

<readFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("outputFile"^^p:VariableName).

<writeFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("outputFile"^^p:VariableName).

#
# Cube Pipeline & Steps
#
<cubesTo> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <listCubeCsvwMetaFiles>
      <forEachCubeCsvwMetaFile>
      <toDataset>
      <toObservation>
      <buildCubeShape>
      <flatten>
    )
  ].
<#debugLogger>
    a                   p:Step;
    code:implementedBy  [ a code:EcmaScriptModule;
                            code:link   <node:barnard59-base/map.js#default>
                        ];
    code:arguments      ( """x => {
                              console.log('b-debug', x);
                              return x
                            }"""^^code:EcmaScript ) .

<cubesToFile> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <cubesTo>
      <serialize>
      <writeCubeFile>
    )
  ].

<listCubeCsvwMetaFiles> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base#glob>
  ];
  code:arguments[
    code:name "pattern";
    code:value "cubeCsvMappingFilePattern"^^p:VariableName
  ].

<forEachCubeCsvwMetaFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/forEach.js#default>
  ];
  code:arguments (<readCubeCsvTriples> "csvMapping").

<readCubeCsvTriples> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readCsv>
      <parseCsv>
      <removeCsvwTriples>
      <removeRegions>
      <map>
    )
  ].

<writeCubeFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("cubeOutputFile"^^p:VariableName).

#
# Dimension Pipeline & Steps
#
<dimensionsTo> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <listDimensionCsvwMetaFiles>
      <forEachDimensionCsvwMetaFile>
    )
  ].

<dimensionsToFile> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <listDimensionCsvwMetaFiles>
      <forEachDimensionCsvwMetaFile>
      <serialize>
      <writeDimensionFile>
    )
  ].

<listDimensionCsvwMetaFiles> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base#glob>
  ];
  code:arguments[
    code:name "pattern";
    code:value "dimensionCsvMappingFilePattern"^^p:VariableName
  ].

<forEachDimensionCsvwMetaFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/forEach.js#default>
  ];
  code:arguments (<readDimensionCsvTriples> "csvMapping").

<readDimensionCsvTriples> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readCsv>
      <parseCsv>
      <removeCsvwTriples>
      <removeRegions>
    )
  ].

<writeDimensionFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("dimensionOutputFile"^^p:VariableName).

#
# Common Subpipelines & Steps
#
<readCsv> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-csvw#fetch>
  ];
  code:arguments [
    code:name "csvw";
    code:value "file:${csvMapping}"^^code:EcmaScriptTemplateLiteral
  ].

<parseCsv> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/csvw.js#parse>
  ];
  code:arguments [
    code:name "metadata";
    code:value <parseMetadata>
  ].

<removeCsvwTriples> a p:Step ;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/filter.js#default>
  ];
  code:arguments ([ a code:EcmaScriptModule;
    code:link <file:../lib/isNotCsvwTriple.js#default>
  ]).

<removeRegions> a p:Step ;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/filter.js#default>
  ];
  code:arguments ([ a code:EcmaScriptModule;
    code:link <file:../lib/filter.js#default>
  ]).

<toDataset> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:rdf-stream-to-dataset-stream/bySubject.js#default>
  ].

<toObservation> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-rdf/cube.js#toObservation>
  ];
  code:arguments [
    code:name "observer";
    code:value "observer"^^p:VariableName
  ].

<buildCubeShape> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-rdf/cube.js#buildCubeShape>
  ];
  code:arguments [
    code:name "metadata";
    code:value <parseCubeMetadata>
  ].

<map> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base#map>
  ];
  code:arguments([ a code:EcmaScriptModule;
    code:link <file:../lib/transform.js#default>;
  ]).

<flatten> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/flatten.js#default>;
  ].

<serialize> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/ntriples.js#serialize>
  ].

<parseCubeMetadata> a p:Pipeline, p:ReadableObjectMode;
  p:variables [
    p:variable _:cubeMetadata
  ];
  p:steps [
    p:stepList (
      <readCubeMetadataFile>
      <parseTurtle>
    )
  ].

<readCubeMetadataFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("cubeMetadataFile"^^p:VariableName).

<parseTurtle> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/n3.js#parse>
  ].

<parseMetadata> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readMetadataJson>
      <parseMetadataJson>
    )
  ].

<readMetadataJson> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("csvMapping"^^p:VariableName).

<parseMetadataJson> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/jsonld.js#parse>
  ].
